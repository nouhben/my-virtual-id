import 'package:best_starter_architecture/services/auth_service.dart';
import 'package:best_starter_architecture/services/firebase_storage_service.dart';
import 'package:best_starter_architecture/services/firestore_service.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'models/custom_user.dart';

/// Used to create user-dependant objects that need to be accessible by all widgets.
/// This widget should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.

class AuthWidgetBuilder extends StatelessWidget {
  final Widget Function(BuildContext, AsyncSnapshot<CustomUser>) builder;

  const AuthWidgetBuilder({Key key, @required this.builder}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    print('AuthWidgetBuilder rebuild');
    final authService = Provider.of<AuthService>(context, listen: false);
    return StreamBuilder(
      stream: authService.onAuthStateChanges,
      builder: (context, snapshot) {
        final CustomUser user = snapshot.data;
        print(
            'in the AuthWidget builder - StreamBuilder: ${snapshot.connectionState}');
        if (user != null) {
          return MultiProvider(
            providers: [
              Provider<CustomUser>.value(value: user),
              Provider<FirestoreService>(
                create: (context) => FirestoreService(uid: user.uid),
              ),
              Provider<FirebaseStorageService>(
                create: (context) => FirebaseStorageService(uid: user.uid),
              ),
            ],
            builder: (context, child) => builder(context, snapshot),
            child: builder(context, snapshot),
          );
        }
        return builder(context, snapshot);
      },
    );
  }
}
